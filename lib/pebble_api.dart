// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class _PebbleApiCodec extends StandardMessageCodec {
  const _PebbleApiCodec();
}

class PebbleApi {
  /// Constructor for [PebbleApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PebbleApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PebbleApiCodec();

  Future<bool> pebbleConnectionStatus() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PebbleApi.pebbleConnectionStatus', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }
}

class _PebbleCallBacksCodec extends StandardMessageCodec {
  const _PebbleCallBacksCodec();
}
abstract class PebbleCallBacks {
  static const MessageCodec<Object?> codec = _PebbleCallBacksCodec();

  void pebbleConnectionState(bool isConnected);
  static void setup(PebbleCallBacks? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PebbleCallBacks.pebbleConnectionState', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PebbleCallBacks.pebbleConnectionState was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_isConnected = (args[0] as bool?);
          assert(arg_isConnected != null, 'Argument for dev.flutter.pigeon.PebbleCallBacks.pebbleConnectionState was null, expected non-null bool.');
          api.pebbleConnectionState(arg_isConnected!);
          return;
        });
      }
    }
  }
}
