// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.ant_pebble_paalam;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class AntServices {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DeviceInfo {
    private @NonNull String deviceName;
    public @NonNull String getDeviceName() { return deviceName; }
    public void setDeviceName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"deviceName\" is null.");
      }
      this.deviceName = setterArg;
    }

    private @NonNull Long deviceNumber;
    public @NonNull Long getDeviceNumber() { return deviceNumber; }
    public void setDeviceNumber(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"deviceNumber\" is null.");
      }
      this.deviceNumber = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DeviceInfo() {}
    public static final class Builder {
      private @Nullable String deviceName;
      public @NonNull Builder setDeviceName(@NonNull String setterArg) {
        this.deviceName = setterArg;
        return this;
      }
      private @Nullable Long deviceNumber;
      public @NonNull Builder setDeviceNumber(@NonNull Long setterArg) {
        this.deviceNumber = setterArg;
        return this;
      }
      public @NonNull DeviceInfo build() {
        DeviceInfo pigeonReturn = new DeviceInfo();
        pigeonReturn.setDeviceName(deviceName);
        pigeonReturn.setDeviceNumber(deviceNumber);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("deviceName", deviceName);
      toMapResult.put("deviceNumber", deviceNumber);
      return toMapResult;
    }
    static @NonNull DeviceInfo fromMap(@NonNull Map<String, Object> map) {
      DeviceInfo pigeonResult = new DeviceInfo();
      Object deviceName = map.get("deviceName");
      pigeonResult.setDeviceName((String)deviceName);
      Object deviceNumber = map.get("deviceNumber");
      pigeonResult.setDeviceNumber((deviceNumber == null) ? null : ((deviceNumber instanceof Integer) ? (Integer)deviceNumber : (Long)deviceNumber));
      return pigeonResult;
    }
  }
  private static class AntApiCodec extends StandardMessageCodec {
    public static final AntApiCodec INSTANCE = new AntApiCodec();
    private AntApiCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AntApi {
    void searchDevices();
    void connectToDevice(@NonNull Long deviceNumber);
    void disconnectDevice();

    /** The codec used by AntApi. */
    static MessageCodec<Object> getCodec() {
      return AntApiCodec.INSTANCE;
    }

    /** Sets up an instance of `AntApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AntApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AntApi.searchDevices", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.searchDevices();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AntApi.connectToDevice", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number deviceNumberArg = (Number)args.get(0);
              if (deviceNumberArg == null) {
                throw new NullPointerException("deviceNumberArg unexpectedly null.");
              }
              api.connectToDevice((deviceNumberArg == null) ? null : deviceNumberArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AntApi.disconnectDevice", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.disconnectDevice();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class AntCallBacksCodec extends StandardMessageCodec {
    public static final AntCallBacksCodec INSTANCE = new AntCallBacksCodec();
    private AntCallBacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return DeviceInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof DeviceInfo) {
        stream.write(128);
        writeValue(stream, ((DeviceInfo) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class AntCallBacks {
    private final BinaryMessenger binaryMessenger;
    public AntCallBacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return AntCallBacksCodec.INSTANCE;
    }

    public void devicesFound(@NonNull List<DeviceInfo> devicesArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AntCallBacks.devicesFound", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(devicesArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void deviceConnectionStatus(@NonNull Boolean successArg, @Nullable String deviceNameArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AntCallBacks.deviceConnectionStatus", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(successArg, deviceNameArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
